generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  emailVerified Boolean   @default(false)
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  password      String
  role          String    @default("user")
  firstName     String
  lastName      String
  accounts      Account[]
  media         Media[]
  products      Product[]
  sessions      Session[]
  tenant        Tenant?

  @@map("user")
}

model Session {
  id        String   @id @default(cuid())
  expiresAt DateTime
  token     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ipAddress String?
  userAgent String?
  userId    String
  tenantId  String?
  tenant    Tenant?  @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

model Account {
  id                    String    @id @default(cuid())
  accountId             String
  providerId            String
  userId                String
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([providerId, accountId])
  @@map("account")
}

model Verification {
  id         String   @id @default(cuid())
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, value])
  @@map("verification")
}

model Tenant {
  id              String          @id @default(cuid())
  subdomain       String          @unique
  name            String?
  description     String?
  isActive        Boolean         @default(true)
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  userId          String          @unique
  theme           String          @default("default")
  themeConfig     Json?
  defaultLanguage String          @default("en")
  favicon         String
  logoUrl         String?
  checkoutConfigs CheckoutConfig[]
  gatewaySetting  GatewaySetting?
  media           Media[]
  products        Product[]
  sessions        Session[]
  user            User            @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("tenant")
}

model Media {
  id         String   @id @default(cuid())
  name       String
  url        String
  type       String
  size       Int
  width      Int?
  height     Int?
  duration   Int?
  alt        String?
  tenantId   String?
  uploadedBy String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  userId     String
  tenant     Tenant?  @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("media")
}

model GatewaySetting {
  id            String   @id @default(cuid())
  publicKey     String
  secretKey     String
  currency      String
  webhookId     String?
  webhookSecret String?
  additional    Json?
  tenantId      String   @unique
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  tenant        Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
}

model CheckoutConfig {
  id             String   @id @default(cuid())
  name           String
  version        String   @default("1.0.0")
  config         Json     // Full checkout configuration
  isActive       Boolean  @default(true)
  isDefault      Boolean  @default(false) // Default config for tenant
  productId      String?  // If null, applies to all products
  tenantId       String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  tenant         Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  product        Product? @relation(fields: [productId], references: [id], onDelete: SetNull)

  @@unique([tenantId, productId, name]) // Ensure unique config per tenant-product-name combination
  @@map("checkout_config")
}

model Product {
  id          String         @id @default(cuid())
  name        String
  slug        String         @unique
  description String?
  imageUrl    String?
  isActive    Boolean        @default(true)
  tenantId    String
  createdBy   String
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  user        User           @relation(fields: [createdBy], references: [id], onDelete: Cascade)
  tenant      Tenant         @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  prices      ProductPrice[]
  checkoutConfigs CheckoutConfig[]

  @@unique([tenantId, slug])
  @@map("product")
}

model ProductPrice {
  id            String    @id @default(cuid())
  productId     String
  name          String
  price         Float
  type          String
  interval      String?
  intervalCount Int?
  isDefault     Boolean   @default(false)
  isActive      Boolean   @default(true)
  storePriceId  String?
  gateway       String?
  deletedAt     DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  product       Product   @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("product_price")
}
